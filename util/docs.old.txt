# Limp Cpu
# amd => Addressing Mode Data

@ 00 [JL]

	- NOP
		& Do not execute any operation

@ 01 [SI]

	func.00 - HALT
		& Halts the system execution
	
	func.01|mode.0 - WAIT
		& Waits for any interruption
	
	func.01|mode.1 - WAITI imm8
		& Waits for a specific interruption of imm

	func.01|mode.2 - WAITI regb
		& Waits for a specific interruption of regb

@ 02

@ 03 [IR]

	mode.0 - POPAS
		& Pops to EST register Application part

	mode.1 - #POPSS
		& Pops to EST register System part

	mode.2 - #POPS
		& Pops to EST register

@ 04 [IR]

	mode.0 - POPR regd
		& Pops a value from stack to regd
	
	mode.1 - POPP regb, regd
		& Pops values from stack to a sequence of register from regd to regb

@ 05

@ 06

@ 07 [AMI]

	mode.0 - LDMB $amd, regd
		& Loads a byte data from memory address to register
	
	mode.1 - LDMW $amd, regd
		& Loads a word data from memory address to register
	
	mode.2 - LDMD $amd, regd
		& Loads a dword data from memory address to register
	
	mode.3 - LDMQ $amd, regd
		& Loads a dword data from memory address to double registers

@ 08 [SI]

	func.00 - IN regd, regp
		& Get input from external device in port by regp to regd
	
	func.01 - OUT regp, regb
		& Outputs value from regb to device in port regp
	
	func.02|mode.0 - CP0RR regd, regp
		& Reads register by regp from coprocessor 0 to register regd

	func.02|mode.1 - CP1RR regd, regp
		& Reads register by regp from coprocessor 1 to register regd

	func.02|mode.2 - CP2RR regd, regp
		& Reads register by regp from coprocessor 2 to register regd

	func.02|mode.3 - CP3RR regd, regp
		& Reads register by regp from coprocessor 3 to register regd

	func.03|mode.0 - CP0WR regp, regb
		& Writes regb value to register by regp to coprocessor 0

	func.03|mode.1 - CP1WR regp, regb
		& Writes regb value to register by regp to coprocessor 1

	func.03|mode.2 - CP2WR regp, regb
		& Writes regb value to register by regp to coprocessor 2

	func.03|mode.3 - CP3WR regp, regb
		& Writes regb value to register by regp to coprocessor 3

	func.04|mode.0 - CP0DI
		& Disables coprocessor 0

	func.04|mode.1 - CP1DI
		& Disables coprocessor 1

	func.04|mode.2 - CP2DI
		& Disables coprocessor 2

	func.04|mode.3 - CP3DI
		& Disables coprocessor 3

	func.05|mode.0 - CP0EN
		& Enables coprocessor 0

	func.05|mode.1 - CP1EN
		& Enables coprocessor 1

	func.05|mode.2 - CP2EN
		& Enables coprocessor 2

	func.05|mode.3 - CP3EN
		& Enables coprocessor 3

	func.06|mode.0 - CP0CHKST regd
		& Reads the status of coprocessor 0 and stores in regd. Note: 0 = Not present; 1 = Enabled; -1 = Disabled

	func.06|mode.1 - CP1CHKST regd
		& Reads the status of coprocessor 1 and stores in regd. Note: 0 = Not present; 1 = Enabled; -1 = Disabled

	func.06|mode.2 - CP2CHKST regd
		& Reads the status of coprocessor 2 and stores in regd. Note: 0 = Not present; 1 = Enabled; -1 = Disabled

	func.06|mode.3 - CP3CHKST regd
		& Reads the status of coprocessor 3 and stores in regd. Note: 0 = Not present; 1 = Enabled; -1 = Disabled

	func.07|mode.0 - CP0CMD regb
		& Sends a command encoded in regb to coprocessor 0

	func.07|mode.1 - CP1CMD regb
		& Sends a command encoded in regb to coprocessor 1

	func.07|mode.2 - CP2CMD regb
		& Sends a command encoded in regb to coprocessor 2

	func.07|mode.3 - CP3CMD regb
		& Sends a command encoded in regb to coprocessor 3

@ 09

@ 0A

@ 0B [IR]

	mode.0 - PSHAS
		& Pushes the EST Register Application part to stack

	mode.1 - #PSHSS
		& Pushes the EST Register System part to stack

	mode.2 - #PSHS
		& Pushes the EST Register to stack

@ 0C [IR]

	mode.0 - PSHI imm
		& Pushes a immediate value to stack
	
	mode.1 - PSHR regb
		& Pushes regb value to stack
	
	mode.2 - PSHP regb, regd
		& Pushes values from sequence regb to regd to stack

@ 0D

@ 0E [CDI]

	mode.0 - STSI.cc regd, regb, rego
		& Stores value from regb to memory at regd, and increments rego

	mode.1 - STSD.cc regd, regb, rego
		& Stores value from regb to memory at regd, and decrements rego

	mode.2 - MMSI.cc regd, regb, rego
		& Stores value from memory at regb to memory at regd, and increments rego

	mode.3 - MMSD.cc regd, regb, rego
		& Stores value from memory at regb to memory at regd, and decrements rego

@ 0F [AMI] #ONLYADDRESS

	mode.0 - STRB $amd, regd
		& Stores a byte register data to memory address
	
	mode.1 - STRW $amd, regd
		& Stores a word register data to memory address
	
	mode.2 - STRD $amd, regd
		& Stores a dword register data to memory address
	
	mode.3 - STRQ $amd, regd
		& Stores a double dword registers data to memory address

@ 10 [AMI]

	mode.0 - ADD regd, $amd
		& Adds a value data to register
	
	mode.1 - ADC regd, $amd
		& Adds a value data with carry to register
	
	mode.2 - SUB regd, $amd
		& Subtracts a value data from register
	
	mode.3 - SBB regd, $amd
		& Subtracts a value with borrow to register

@ 11 [AMI]

	mode.0 - MUL regd, $amd
		& Multiplies a value data to register
	
	mode.1 - HMUL regd, $amd
		& Multiplies a value data with register, and store the higher dword part to register
	
	mode.2 - DIV regd, $amd
		& Divides a value data to register
	
	mode.3 - MOD regd, $amd
		& Modules a value data to register

@ 12

@ 13

@ 14 [SI]

	func.00 - INC regd
		& Do a increment in regd
	
	func.01 - DEC regd
		& Do a decrement in regd
	
	func.02 - NEG regd
		& Do a subtraction of zero by regd, and stores
	
	func.03 - MADD regd, regb, regp
		& Multiply regd by regb, then adds regp and store at regd
	
	func.04 - MSUB regd, regb, regp
		& Multiply regd by regb, then subtracts regp and store at regd
	
	func.05 - MADC regd, regb, regp
		& Multiply regd by regb, then adds regp with carry and store at regd
	
	func.06 - MSBB regd, regb, regp
		& Multiply regd by regb, then subtracts regp with borrow and store at regd
	
	func.07 - LDIV regd, regb
		& Divides regd by regb, but stores at regd the under integer (decimal part) value

@ 15 [AMI]

	mode.0 - CMP regd, $amd
		& Do a subtraction between a value data from register without saving the result, doing a comparation

	mode.1 - CPB regd, $amd
		& Do a subtraction with borrow between a value data from register without saving the result, doing a comparation

@ 16

@ 17

@ 18 [AMI]

	mode.0 - AND regd, $amd
		& Do and bitwise value data to register
	
	mode.1 - OR regd, $amd
		& Do or bitwise value data with register
	
	mode.2 - XOR regd, $amd
		& Do xor bitwise value data to register
	
	mode.3 - NAND regd, $amd
		& Do nand bitwise value data to register

@ 19 [SI]

	func.0 - NOT regd
		& Inverts the bits values of regd
	
	func.1 - SETB regd, imm8
		& Sets the bit of regd at offset of imm
	
	func.2 - CLRB regd, imm8
		& Clears the bit of regd at offset of imm
	
	func.3 - SWAP regd
		& Swaps the bytes of regd, changing the endianess
	
	func.4 - SWAPB regd
		& Swaps the bits of regd, changing its format

@ 1A [AMI]

	mode.0 - TEST $amd
		& Test the data value and sets the bits acoordling

	mode.1 - BIT regd, $amd
		& Do and bitwise between regd and data, doing a bit test, without store the result

@ 1B [AMI]

	mode.0 - LSHF regd, $amd
		& Do a left shift in regd by data

	mode.1 - RSHF regd, $amd
		& Do a right shift in regd by data

	mode.2 - LROT regd, $amd
		& Do a left rotate in regd by data

	mode.3 - RROT regd, $amd
		& Do a right rotate in regd by data

@ 1C [SI]

	func.00 - FADD regd, regb
		& In Floating-Point format, adds regb to regd

	func.01 - FADC regd, regb
		& In Floating-Point format, adds regb to regd with carry

	func.02 - FSUB regd, regb
		& In Floating-Point format, subtracts regb from regd

	func.03 - FSBB regd, regb
		& In Floating-Point format, subtracts regb from regd with borrow

	func.04 - FMUL regd, regb
		& In Floating-Point format, multiply regb to regd

	func.05 - FMADD regd, regb, regp
		& In Floating-Point format, multiply regb to regd and adds regp

	func.06 - FMADC regd, regb, regp
		& In Floating-Point format, multiply regb to regd and adds regp with carry

	func.07 - FMSUB regd, regb, regp
		& In Floating-Point format, multiply regb to regd and subtracts regp

	func.08 - FMSBB regd, regb, regp
		& In Floating-Point format, multiply regb to regd and subtracts regp with borrow

	func.09 - FDIV regd, regb
		& In Floating-Point format, divides regb by regd

	func.0A - FMOD regd, regb
		& In Floating-Point format, modulates regb by regd

	func.0B - FSCALE regd, regb
		& In Floating-Point format, scales regb in power of two by regb in dword format

	func.0C - FABS regd
		& In Floating-Point format, sets regd to its absolute value

	func.0D - FNEG regd
		& In Floating-Point format, do 0-regd and stores to regd

	func.0E - FPOW regd, regb
		& In Floating-Point format, do pow of regd by regb
	
	func.0F - FSQRT regd, regb
		& In Floating-Point format, do square root of regb and stores to regd

	func.10 - FCBRT regd, regb
		& In Floating-Point format, do cubic root of regb and stores to regd

	func.11 - FQTRT regd, regb
		& In Floating-Point format, do 4th root of regb and stores to regd

	func.12 - FCINT regd, regb
		& In Floating-Point format, do a ceil of regd to int format and stores to regd
	
	func.13 - FXAM regd, regb
		& In Floating-Point format, examinates value of regb and store status in regd. Note: 0 = Zero; 1 = Normal; 2 = SubNormal; 3 = NaN; 4 = Infinity

	func.14 - FLOG2 regd, regb
		& In Floating-Point format, do a log in base 2 of regb and stores to regd
	
	func.15 - FLOG10 regd, regb
		& In Floating-Point format, do a log in base 10 of regb and stores to regd
	
	func.16 - FSIN regd, regb
		& In Floating-Point format, do sine of regb and stores to regd
	
	func.17 - FCOS regd, regb
		& In Floating-Point format, do cosine of regb and stores to regd
	
	func.18 - FTAN regd, regb
		& In Floating-Point format, do tangent of regb and stores to regd
	
	func.19 - FASIN regd, regb
		& In Floating-Point format, do arcsine of regb and stores to regd
	
	func.1A - FACOS regd, regb
		& In Floating-Point format, do arcosine of regb and stores to regd
	
	func.1B - FATAN regd, regb
		& In Floating-Point format, do arctangent of regb and stores to regd
	
	func.1C - FATAN2 regd, regb, regp
		& In Floating-Point format, do arctangent in y of regb and x of regp to regd
	
	func.1D - FFLR regd, regb
		& In Floating-Point format, rounds regb to floor and stores to regd
	
	func.1E - FRND regd, regb
		& In Floating-Point format, rounds regb and stores to regd
	
	func.1F - FCIL regd, regb
		& In Floating-Point format, rounds regb to ceil and stores to regd
	
	func.38 - FCVUB regd, regb
		& Convert from Floating-Point format regb to unsigned byte regd
	
	func.39 - FCVUW regd, regb
		& Convert from Floating-Point format regb to unsigned word regd
	
	func.3A - FCVUD regd, regb
		& Convert from Floating-Point format regb to unsigned dword regd
	
	func.3B - FCVB regd, regb
		& Convert from Floating-Point format regb to byte regd
	
	func.3C - FCVW regd, regb
		& Convert from Floating-Point format regb to word regd
	
	func.3D - FCVD regd, regb
		& Convert from Floating-Point format regb to dword regd
	
	func.3E - FUDCV regd, regb
		& Convert from unsigned dword regb to Floating-Point format regd
	
	func.3F - FDCV regd, regb
		& Convert from dword regb to Floating-Point format regd
	
@ 1D

	func.00 - FSTEQ regd, imm8, regb, regp
		& Stores a immediate value to register if in Floating-point regb is equal to regp

	func.01 - FSTNE regd, imm8, regb, regp
		& Stores a immediate value to register if in Floating-point regb is not equal to regp

	func.02 - FSTLT regd, imm8, regb, regp
		& Stores a immediate value to register if in Floating-point regb is less than regp

	func.03 - FSTGT regd, imm8, regb, regp
		& Stores a immediate value to register if in Floating-point regb is greater than regp

	func.04 - FSTLE regd, imm8, regb, regp
		& Stores a immediate value to register if in Floating-point regb is less or equal than regp

	func.05 - FSTGE regd, imm8, regb, regp
		& Stores a immediate value to register if in Floating-point regb is greater or equal than regp

	func.06 - FSTEZI regd, imm8, regb
		& Stores a immediate value to register if in Floating-point regb is equal to zero

	func.07 - FSTNZI regd, imm8, regb
		& Stores a immediate value to register if in Floating-point regb is not equal to zero

	func.08 - FSTLTZI regd, imm8, regb
		& Stores a immediate value to register if in Floating-point regb is less than zero

	func.09 - FSTGTZI regd, imm8, regb
		& Stores a immediate value to register if in Floating-point regb is greater than zero

	func.0A - FSTLEZI regd, imm8, regb
		& Stores a immediate value to register if in Floating-point regb is less or equal than zero

	func.0B - FSTGEZI regd, imm8, regb
		& Stores a immediate value to register if in Floating-point regb is greater or equal than zero

	func.0C - FSTEZ regd, regp, regb
		& Stores regp value to register if in Floating-point regb is equal to zero

	func.0D - FSTNZ regd, regp, regb
		& Stores regp value to register if in Floating-point regb is not equal to zero

	func.0E - FSTLTZ regd, regp, regb
		& Stores regp value to register if in Floating-point regb is less than zero

	func.0F - FSTGTZ regd, regp, regb
		& Stores regp value to register if in Floating-point regb is greater than zero

	func.10 - FSTLEZ regd, regp, regb
		& Stores regp value to register if in Floating-point regb is less or equal than zero

	func.11 - FSTGEZ regd, regp, regb
		& Stores regp value to register if in Floating-point regb is greater or equal than zero

@ 1E

@ 1F

@ 20 [ADI]

	mode.0 - JA imm16<2
		& Jumps to a absolute address position
	
	mode.1 - BA imm16<2
		& Branchs to a absolute address position

	mode.2 - JR imm16<2
		& Jumps by a relative offset

	mode.3 - BR imm16<2
		& Branchs by a relative offset

@ 21 [SI]

	func.0 - RET
		& Returns from a branch
	
	func.1 - #IRET
		& Returns from a interruption
	
	func.2|mode.0 - ENTER imm
		& Reserves a sized space stack for current procedure and stores offset in EFP
	
	func.2|mode.1 - ENTERV regb
		& Reserves a sized variable space stack for current procedure and stores offset in EFP
	
	func.3 - LEAVE imm
		& Free the reserved space stack and return the old EFP and ESP values (May be called after using ENTER or ENTERV)

	func.4 - INT imm8
		& Calls for system interruption

@ 22 [CDI]

	mode.0 - JRA regb
		& Jumps to a absolute address by regp
	
	mode.1 - BRA regp
		& Branchs to a absolute address by regp
	
	mode.2 - #JRAP regp
		& Jumps to a absolute address by regp in protected mode

	mode.3 - #BRAP regp
		& Branchs to a absolute address by regp in protected mode

@ 23 [CDI]

	mode.0 - JRR regb
		& Jumps by a relative offset by regp
	
	mode.1 - BRR regp
		& Branchs by a relative offset by regp
	
	mode.2 - XJP regb
		& Exchange value between regp and epc, doing a jump

	mode.3 - XBR regb
		& Exchange value between regp and epc, doing a branch

@ 24 [JL]

	- JL imm<2
		& Do a long jump inside the current 256 MB Bank

@ 25 [JL]

	- BL imm<2
		& Do a long branch inside the current 256 MB Bank

@ 26 [JL]

	- #JLP imm<2
		& Do a long jump inside the current 256 MB Bank in protected mode

@ 27 [JL]

	- #BLP imm<2
		& Do a long branch inside the current 256 MB Bank in protected mode

@ 28

@ 29

@ 2A

@ 2B

@ 2C

@ 2D

@ 2E

@ 2F

@ 30 [IR]

	mode.0 - MOV regd, regb
		& Moves a value from one register to another
	
	mode.1 - MOVI regd, imm16
		& Moves a immediate value to a register

@ 31 [IR]

	mode.0 - CVBW regd, regb
		& Converts a byte data to sign extended word to register

	mode.1 - CVBD regd, regb
		& Converts a byte data to sign extended dword to register

	mode.2 - CVWD regd, regb
		& Converts a word data to sign extended dword to register

	mode.3 - CVWDI regd, regb
		& Converts a word immediate data to sign extended dword to register

@ 32 [CDI]

	mode.0 - MV regd, regb
		& Moves value from regb to regd conditionally

@ 33 [SI]

	func.0 - XCHG regd, regb
		& Exchanges the value of regd by regb

@ 34 [SI]

	func.00 - STEQ regd, imm8, regb, regp
		& Stores a immediate value to register if regb is equal to regp

	func.01 - STNE regd, imm8, regb, regp
		& Stores a immediate value to register if regb is not equal to regp

	func.02 - STLT regd, imm8, regb, regp
		& Stores a immediate value to register if regb is less than regp

	func.03 - STGT regd, imm8, regb, regp
		& Stores a immediate value to register if regb is greater than regp

	func.04 - STLE regd, imm8, regb, regp
		& Stores a immediate value to register if regb is less or equal than regp

	func.05 - STGE regd, imm8, regb, regp
		& Stores a immediate value to register if regb is greater or equal than regp

	func.06 - STBL regd, imm8, regb, regp
		& Stores a immediate value to register if regb is below than regp

	func.07 - STAB regd, imm8, regb, regp
		& Stores a immediate value to register if regb is above than regp

	func.08 - STBE regd, imm8, regb, regp
		& Stores a immediate value to register if regb is below or equal than regp

	func.09 - STAE regd, imm8, regb, regp
		& Stores a immediate value to register if regb is above or equal than regp

	func.0A - STEZI regd, imm8, regb
		& Stores a immediate value to register if regb is equal to zero

	func.0B - STNZI regd, imm8, regb
		& Stores a immediate value to register if regb is not equal to zero

	func.0C - STLTZI regd, imm8, regb
		& Stores a immediate value to register if regb is less than zero

	func.0D - STGTZI regd, imm8, regb
		& Stores a immediate value to register if regb is greater than zero

	func.0E - STLEZI regd, imm8, regb
		& Stores a immediate value to register if regb is less or equal than zero

	func.0F - STGEZI regd, imm8, regb
		& Stores a immediate value to register if regb is greater or equal than zero

	func.10 - STBLZI regd, imm8, regb
		& Stores a immediate value to register if regb is below than zero

	func.11 - STABZI regd, imm8, regb
		& Stores a immediate value to register if regb is above than zero

	func.12 - STBEZI regd, imm8, regb
		& Stores a immediate value to register if regb is below or equal than zero

	func.13 - STAEZI regd, imm8, regb
		& Stores a immediate value to register if regb is above or equal than zero

	func.14 - STEZ regd, regp, regb
		& Stores regp value to register if regb is equal to zero

	func.15 - STNZ regd, regp, regb
		& Stores regp value to register if regb is not equal to zero

	func.16 - STLTZ regd, regp, regb
		& Stores regp value to register if regb is less than zero

	func.17 - STGTZ regd, regp, regb
		& Stores regp value to register if regb is greater than zero

	func.18 - STLEZ regd, regp, regb
		& Stores regp value to register if regb is less or equal than zero

	func.19 - STGEZ regd, regp, regb
		& Stores regp value to register if regb is greater or equal than zero

	func.1A - STBLZ regd, regp, regb
		& Stores regp value to register if regb is below than zero

	func.1B - STABZ regd, regp, regb
		& Stores regp value to register if regb is above than zero

	func.1C - STBEZ regd, regp, regb
		& Stores regp value to register if regb is below or equal than zero

	func.1D - STAEZ regd, regp, regb
		& Stores regp value to register if regb is above or equal than zero

@ 35 [IR]

	mode.0 - MVFR regd, imm
		& Moves value from extra register in index of imm in processor to regd

	mode.1 - MVTR imm, regb
		& Moves value from regb to extra register in index of imm in processor

@ 36

@ 37

@ 38 [SI]

	func.00 - STC
		& Sets the flag CF
	
	func.01 - CLC
		& Clears the flag CF
	
	func.02 - TGC
		& Toggles the flag CF

	func.03 - STB
		& Sets the flag BF
	
	func.04 - CLB
		& Clears the flag BF
	
	func.05 - TGB
		& Toggles the flag BF

	func.06 - STV
		& Sets the flag VF
	
	func.07 - CLV
		& Clears the flag VF
	
	func.08 - TGV
		& Toggles the flag VF

	func.09 - STZ
		& Sets the flag ZF
	
	func.0A - CLZ
		& Clears the flag ZF
	
	func.0B - TGZ
		& Toggles the flag ZF

	func.0C - STN
		& Sets the flag NF
	
	func.0D - CLN
		& Clears the flag NF
	
	func.0E - TGN
		& Toggles the flag NF

	func.0F - STO
		& Sets the flag OF
	
	func.10 - CLO
		& Clears the flag OF
	
	func.11 - TGO
		& Toggles the flag OF

	func.12 - #ENBI
		& Enables interruption
	
	func.13 - #DSBI
		& Disables interruption
	
	func.14 - #ENBV
		& Enables virtual mode
	
	func.15 - #DSBV
		& Disables virtual mode
	
@ 39

@ 3A

@ 3B

@ 3C

@ 3D

@ 3E

@ 3F

